use patients
db.diseaseRecords.insertMany() within parentheses copy paste test json data
db.diseaseRecords.updateOne({firstName: "Rahul"}, {$set: {firstName: "Nitin", age: "29", history: [{disease: "jaundice", treatment: "Liv52"}]}})
db.diseaseRecords.find({age: {$gt: 20}}).pretty()
db.diseaseRecords.deleteMany({"history.disease": "cold"})

{
        "_id" : ObjectId("5e76396c449f99078b12ae7e"),
        "title" : "My First Post!",
        "text" : "This is my first Post",
        "tags" : [
                "new",
                "tech"
        ],
        "comments" : [
                {
                        "text" : "I like this post",
                        "author" : ObjectId("5e76389d449f99078b12ae7c")
                }
        ],
        "creator" : ObjectId("5e76389d449f99078b12ae7d")
}

mongod --dbpath pathname --logpath logpathname

dbpath can be a folder name however logpath must point to a log file log.log for example

sudo mongod --fork --logpath logpathname

forking runs the mongodb as a background and our terminal can still be used forother tasks

net start mongodb
net stop mongodb 

to start or stop mongodb background service

#to import
mongoimport tvShows.json -d movieData -c movies --jsonArray --drop

-d is for databasename movieData here -c is collection mae movies here, --jsonArray tells that we have an array of elements to import
drop means existing collection will be dropped otherwise default behaviour is to append

#show collections to show collections n that database

#querying an embedded document

db.movies.find({"rating.average": {$gt: 9}}).pretty()

db.movies.find({genres: "Drama"}).pretty() //shall find all focs having drama as one of the genres

db.movies.find({genres: ["Drama"]}).pretty()//genre only drama

db.movies.find({runtime: {$in: [30, 42]}}).pretty()//runtime as 30 or 42

db.movies.find({runtime: {$nin: [30, 42]}}).pretty()//runtime not as either 30 or 42

db.movies.find({"rating.average": {$lt: 5}}).count()//to count

//avreage rating less than 5 and greater than 9.3, matches all conditions which is in that array of or

db.movies.find({$or: [{"rating.average": {$lt: 5}}, {"rating.average": {$gt: 9.3}}]}).pretty() 

db.movies.find({$nor: [{"rating.average": {$lt: 5}}, {"rating.average": {$gt: 9.3}}]}).pretty() //neither conditions are matched

db.movies.find({$and: [{"rating.average": {$gt: 9}}, {genres: "Drama"}]}).count()//average rating greater than 9 and genre as Drama

db.movies.find({"rating.average": {$gt: 9}, genres: "Drama"}).count()//two queries at line 65 and 67 are equivalent because by default mongodb ands the query

//if the keys are repeating like below it will not work and we shall have to use $and

db.movies.find({genres: "Drama", genres: "Horror"}) will result into db.movies.find({genres: "Horror"})

db.movies.find({runtime: {$not: {$eq: 60}}}).count() //not equal to 60 runtime
db.movies.find({runtime: {$ne: 60}}).count()//not equal to 60 runtime, both queries are same

db.movies.find({rating: {$exists: true}}).count() //where the field name rating exists in document

db.movies.find({"rating.average": {$exists: true, $eq: 9 }}).count()//rating.average field exists and is equal to 9

db.movies.find({summary: {$regex: /musical/}}).pretty() //regex is enclosed in / /

db.sales.find({$expr: {$gt: ["$volume", "$target"]}}).pretty() //finds all documents where value in volume field is greater than value in target field

db.movieStarts.find({genre: {$size: 2}}).pretty() //has exactly two genres, boxoffice extended

db.movieStarts.find({"meta.aired": 2018}).pretty()//all movies aired in 2018, boxoffice extended

//all documents in which in ratings array at least one element which matches both criteria i.e 9
db.movieStarts.find({ratings: {$elemMatch : {$gt: 8, $lt: 10}}}).pretty()

//cursors
const dataCursor = db.movies.find()
dataCursor.next()
dataCursor.forEach(doc => {printjson(doc)}) //will print all remaining documents cursor has not retured yet
dataCursor.hasNext() //based upon if there are any more elements to return

//sorting
db.movies.find().sort({"rating.average" : 1}).pretty()

db.movies.find().sort({"rating.average" : 1, runtime: -1 }).skip(100).limit(10).pretty()

db.movies.find({}, {_id: 0, genres:1, runtime: 1, "runtime.average": 1})//will only return fields marked as 1 and skip which marked as 0 or not mentioned

db.movies.find({genres: "Drama"}, {"genres.$":1}).pretty() //filters out only drama from genres array

//will return only horror

db.movies.find({genres: {$all: ["Drama", "Horror"]}}, {"genres.$": 1}).pretty()

db.movies.find({"rating.average": {$gt: 9}}, {genres: {$slice: 2}, name: 1}).pretty()// will limit this to 2 array elements